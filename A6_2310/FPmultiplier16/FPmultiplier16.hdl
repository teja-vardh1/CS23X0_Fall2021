CHIP FPmultiplier16{
    IN x[16],y[16];
    OUT z[16];

    PARTS:
    Xor(a=x[15], b=y[15], out=z[15]); //sign bit
    Multiplier(a[7]=true, a[0]=x[0], a[1]=x[1], a[2]=x[2], a[3]=x[3], a[4]=x[4], a[5]=x[5], a[6]=x[6], b[7]=true, b[0]=y[0], b[1]=y[1], b[2]=y[2], b[3]=y[3], b[4]=y[4], b[5]=y[5], b[6]=y[6], p[0]=pp0, p[1]=pp1, p[2]=pp2, p[3]=pp3, p[4]=pp4, p[5]=pp5, p[6]=pp6, p[7]=pp7, p[8]=pp8, p[9]=pp9, p[10]=pp10, p[11]=pp11, p[12]=pp12, p[13]=pp13, p[14]=pp14, p[15]=pp15);
    multiplexor(w[0]=pp7, w[1]=pp8, w[2]=pp9, w[3]=pp10, w[4]=pp11, w[5]=pp12, w[6]=pp13, x[0]=pp8, x[1]=pp9, x[2]=pp10, x[3]=pp11, x[4]=pp12, x[5]=pp13, x[6]=pp14, s0=pp15, out[0]=z[0], out[1]=z[1], out[2]=z[2], out[3]=z[3], out[4]=z[4], out[5]=z[5], out[6]=z[6]);
    Add8(a[0]=x[7], a[1]=x[8], a[2]=x[9], a[3]=x[10], a[4]=x[11], a[5]=x[12], a[6]=x[13], a[7]=x[14], b[0]=y[7], b[1]=y[8], b[2]=y[9], b[3]=y[10], b[4]=y[11], b[5]=y[12], b[6]=y[13], b[7]=y[14], sign=false, out[0]=s0, out[1]=s1, out[2]=s2, out[3]=s3, out[4]=s4, out[5]=s5, out[6]=s6, out[7]=s7, overflow=s8);

    Subtractor(x[0]=s0, x[1]=s1, x[2]=s2, x[3]=s3, x[4]=s4, x[5]=s5, x[6]=s6, x[7]=s7, x[8]=s8, y[0]=true, y[1]=true, y[2]=true, y[3]=true, y[4]=true, y[5]=true, y[6]=true, y[7]=false, y[8]=false, z[0]=t0, z[1]=t1, z[2]=t2, z[3]=t3, z[4]=t4, z[5]=t5, z[6]=t6, z[7]=t7);
    Subtractor(x[0]=s0, x[1]=s1, x[2]=s2, x[3]=s3, x[4]=s4, x[5]=s5, x[6]=s6, x[7]=s7, x[8]=s8, y[0]=false, y[1]=true, y[2]=true, y[3]=true, y[4]=true, y[5]=true, y[6]=true, y[7]=false, y[8]=false, z[0]=u0, z[1]=u1, z[2]=u2, z[3]=u3, z[4]=u4, z[5]=u5, z[6]=u6, z[7]=u7);
    
    multiplexor2(w[0]=t0, w[1]=t1, w[2]=t2, w[3]=t3, w[4]=t4, w[5]=t5, w[6]=t6, w[7]=t7, x[0]=u0, x[1]=u1, x[2]=u2, x[3]=u3, x[4]=u4, x[5]=u5, x[6]=u6, x[7]=u7, s0=pp15, out[0]=z[7], out[1]=z[8], out[2]=z[9], out[3]=z[10], out[4]=z[11], out[5]=z[12], out[6]=z[13], out[7]=z[14]);

}